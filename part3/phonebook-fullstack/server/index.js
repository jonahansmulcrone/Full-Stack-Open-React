const express = require('express')
const cors = require('cors')
var morgan = require('morgan')

require('dotenv').config()
const app = express()
const Number = require('./models/number')

// app.use(express.static('dist'))
app.use(cors())
app.use(express.json())
app.use(morgan((tokens, request, response) => {
    let logger = [
        tokens.method(request, response),
        tokens.url(request, response),
        tokens.status(request, response),
        tokens.res(request, response, 'content-length'), '-',
        tokens['response-time'](request, response), 'ms ',
    ].join(' ')

    if (request.body != '') {
        logger = logger.concat(JSON.stringify(request.body))
    }

    return logger
}))

/* ID generated by MongoDB --> generateID() is no longer needed! */
// const generateId = () => {
//     const maxId = numbers.length > 0
//         ? Math.max(...numbers.map(n => Number(n.id)))
//         : 0

//     return String(maxId + 1)
// }

// Routes

app.get('/', (_, response) => {
    response.send('<h1>Virtual Phonebook</h1>')
})

app.get('/api/numbers', (_, response) => {
    Number.find({}).then(numbers => {
        response.json(numbers)
    })
})

app.get('/info', (request, response) => {
    const time = new Date()
    response.send(`<p>Phonebook has info for ${numbers.length} people</p>
                   <p>${time}</p>`)
})

app.get('/api/numbers/:id', (request, response) => {

    Number.findById(request.params.id).then(number => {
        response.json(number)
    })
})

app.post('/api/numbers', (request, response) => {
    const body = request.body

    if (!body.number || !body.name) {
        return response.status(400).json({
            error: 'Phone Number or Name was not provided in the request'
        })
    }

    try {
        Number.findOne({ name: body.name })
            .then(number => {
                if (number?.toObject()?.name == body.name) {
                    response.json(`${number.name} already exists in the phonebook!`).end()
                } else {
                    const newNumber = new Number({
                        name: body.name,
                        number: body.number,
                    })

                    newNumber.save().then(savedNumber => {
                        response.json(savedNumber)
                    })
                }
            })
    } catch (error) {
        response.json('error finding matching entry', error.message).end()
    }
})

app.delete('/api/numbers/:id', (request, response) => {
    const id = request.params.id

    numbers = numbers.filter(n => n.id !== id)
    response.status(204).end()
})

const PORT = process.env.PORT || 3001
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`)
})